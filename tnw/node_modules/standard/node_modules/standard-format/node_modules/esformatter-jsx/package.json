{
  "name": "esformatter-jsx",
  "version": "2.3.11",
  "description": "esformatter plugin: format javascript files that contain React JSX blocks",
  "repository": {
    "type": "git",
    "url": "git://github.com/royriojas/esformatter-jsx"
  },
  "license": "MIT",
  "author": {
    "name": "Roy Riojas",
    "url": "http://royriojas.com"
  },
  "main": "index.js",
  "files": [
    "index.js",
    "lib/"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "prepush": [
    "npm run check"
  ],
  "precommit": [
    "npm run check"
  ],
  "scripts": {
    "beautify": "esbeautifier 'index.js' 'lib/**/*.js' 'specs/**/*.spec.js'",
    "beautify-check": "esbeautifier -k 'index.js' 'lib/**/*.js' 'specs/**/*.spec.js'",
    "eslint": "eslinter 'index.js' 'lib/**/*.js' 'specs/**/*.spec.js'",
    "test": "mocha-runner 'specs/**/*.spec.js'",
    "cover": "istanbul cover -x 'specs/**/*.spec.js' mocha-runner 'specs/**/*.spec.js' html text-summary",
    "watch": "npm run cover && watch-spawn -p 'specs/**/*.spec.js' -p 'index.js' -p  npm run cover",
    "lint": "npm run beautify && npm run eslint && npm test",
    "check": "npm run beautify-check && npm run eslint && npm test",
    "changelog": "changelogx -f markdown -o ./changelog.md",
    "do-changelog": "npm run changelog && git add ./changelog.md && git commit -m 'DOC: Generate changelog' --no-verify",
    "install-hooks": "prepush install && changelogx install-hook && precommit install",
    "pre-v": "npm run check",
    "post-v": "npm run do-changelog && git push --no-verify && git push --tags --no-verify",
    "bump-major": "npm run pre-v && npm version major -m 'BLD: Release v%s' && npm run post-v",
    "bump-minor": "npm run pre-v && npm version minor -m 'BLD: Release v%s' && npm run post-v",
    "bump-patch": "npm run pre-v && npm version patch -m 'BLD: Release v%s' && npm run post-v",
    "exec-demo": "cd demo && node runner.js"
  },
  "keywords": [
    "esformatter-plugin",
    "esformatter",
    "jsx",
    "react jsx",
    "AST",
    "codestyle",
    "react jsx"
  ],
  "peerDependencies": {},
  "dependencies": {
    "babel-core": "^5.8.34",
    "esformatter-ignore": "^0.1.3",
    "extend": "^2.0.1",
    "fresh-falafel": "^1.2.0",
    "js-beautify": "^1.5.10"
  },
  "devDependencies": {
    "changelogx": "^1.0.18",
    "esbeautifier": "^3.2.0",
    "esformatter": "^0.8.1",
    "eslinter": "^3.2.0",
    "istanbul": "^0.3.17",
    "mocha-runner": "^1.0.8",
    "precommit": "^1.1.5",
    "prepush": "^3.1.4",
    "proxyquire": "^1.6.0",
    "read-json-sync": "^1.1.0",
    "watch-spawn": "^1.0.3"
  },
  "changelogx": {
    "ignoreRegExp": [
      "BLD: Release",
      "DOC: Generate Changelog",
      "Generated Changelog"
    ],
    "issueIDRegExp": "#(\\d+)",
    "commitURL": "https://github.com/royriojas/esformatter-jsx/commit/{0}",
    "authorURL": "https://github.com/{0}",
    "issueIDURL": "https://github.com/royriojas/esformatter-jsx/issues/{0}",
    "projectName": "esformatter-jsx"
  },
  "readme": "# [esformatter](https://github.com/millermedeiros/esformatter)-jsx\n> esformatter plugin: format javascript files that contain React JSX blocks\n\n[![NPM Version](http://img.shields.io/npm/v/esformatter-jsx.svg?style=flat)](https://npmjs.org/package/esformatter-jsx)\n[![Build Status](http://img.shields.io/travis/royriojas/esformatter-jsx.svg?style=flat)](https://travis-ci.org/royriojas/esformatter-jsx)\n\n## Demo\n\nLive demo: [esformatter-jsx](http://requirebin.com/embed?gist=0d67452e01754269660f)\n\n### Usage with [JSFMT](https://github.com/ionutvmi/sublime-jsfmt) \n\ncheck this [guide](https://github.com/royriojas/esformatter-jsx/wiki/Usage-with-jsfmt)\n\n### best configuration\n\nIf you're running into troubles with the formatting applied to your files I found this configuration to work the best:\n\n```javascript\n{\n  \"jsx\": {\n    \"formatJSX\": true, //Duh! that's the deafault\n    \"attrsOnSameLineAsTag\": false, // move each attribute to its own line\n    \"maxAttrsOnTag\": 3, // if lower or equal than 3 attributes, they will be kept on a single line\n    \"firstAttributeOnSameLine\": true, // keep the first attribute in the same line as the tag\n    \"alignWithFirstAttribute\": false, // do not align attributes with the first tag\n    \"spaceInJSXExpressionContainers\": \" \", // default to one space. Make it empty if you don't like spaces between JSXExpressionContainers\n    \"htmlOptions\": {\n      // put here the options for js-beautify.html\n    }\n  }\n}\n```\n\n## Overview\n\n**Esformatter-jsx** is a plugin for [esformatter](https://github.com/millermedeiros/esformatter) meant to allow the\ncode formatting of jsx files or js files with React code blocks, using [js-beautify](https://www.npmjs.com/package/js-beautify) to\nbeautify the \"html like\" syntax of the react components. **Use at your own risk**. I have tested this against complex JSX structures and seems to be workfing fine, but bugs might appear, so don't blame me :).\n\nIt works for my main use case and I hope it works for you too.\n\nThis plugin is based on [esformatter-jsx-ignore](https://github.com/royriojas/esformatter-jsx-ignore)\n\nIf you want a bit of history about what this plugin was develop, check:\n- https://github.com/millermedeiros/esformatter/issues/242\n- https://github.com/facebook/esprima/issues/74\n\nSo this plugin will turn this:\n```js\nvar React = require('react');\n\nvar Hello = React.createClass({\nrender: function () {\nreturn <div\n\nclassName=\"hello-div\">{this.props.message}</div>;\n}\n});\n\nReact.render(<Hello\nmessage=\"world\"/>,      document.body);\n```\n\ninto:\n```js\nvar React = require('react');\n\nvar Hello = React.createClass({\n  render: function() {\n    return <div className=\"hello-div\">{this.props.message}</div>;\n  }\n});\n\nReact.render(<Hello message=\"world\"/>, document.body);\n```\n\n## Installation\n\n```sh\n$ npm install esformatter-jsx --save-dev\n```\n\n## Config\n\nNewest esformatter versions autoload plugins from your `node_modules` [See this](https://github.com/millermedeiros/esformatter#plugins)\n\nAdd to your esformatter config file:\n\nIn order for this to work, this plugin should be the first one! (I Know too picky, but who isn't).\n\n```javascript\n{\n  \"plugins\": [\n    \"esformatter-jsx\"\n  ],\n  // this is the section this plugin will use to store the settings for the jsx formatting\n  \"jsx\": {\n    // by default is true if set to false it works the same as esformatter-jsx-ignore\n    \"formatJSX\": true,\n    // keep the node attributes on the same line as the open tag. Default is true.\n    // Setting this to false will put each one of the attributes on a single line\n    \"attrsOnSameLineAsTag\": true,\n     // how many attributes should the node have before having to put each\n     // attribute in a new line. Default 1\n    \"maxAttrsOnTag\": 1,\n    // if the attributes are going to be put each one on its own line, then keep the first\n    // on the same line as the open tag\n    \"firstAttributeOnSameLine\": false,\n    // default to one space. Make it empty if you don't like spaces between JSXExpressionContainers\n    \"spaceInJSXExpressionContainers\": \" \",\n    // align the attributes with the first attribute (if the first attribute was kept on the same line as on the open tag)\n    \"alignWithFirstAttribute\": true,\n    \"htmlOptions\": { // same as the ones passed to js-beautifier.html\n      \"brace_style\": \"collapse\",\n      \"indent_char\": \" \",\n      \"indent_size\": 2,\n      \"max_preserve_newlines\": 2,\n      \"preserve_newlines\": true\n      //wrap_line_length: 250\n    }\n  }\n}\n```\n\nThe `htmlOptions` are passed directly to [js-beautify](https://www.npmjs.com/package/js-beautify), please check its\ndocumentation for all the possible options.\n\nOr you can manually register your plugin:\n\n```js\n// register plugin\nesformatter.register(require('esformatter-jsx'));\n```\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar esformatter = require('esformatter');\n//register plugin manually\nesformatter.register(require('esformatter-jsx'));\n\nvar str = fs.readFileSync('someKewlFile.js').toString();\nvar output = esformatter.format(str);\n//-> output will now contain the formatted code\n```\n\nSee [esformatter](https://github.com/millermedeiros/esformatter) for more options and further usage info.\n\n## License\n\n[MIT](License)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/royriojas/esformatter-jsx/issues"
  },
  "_id": "esformatter-jsx@2.3.11",
  "dist": {
    "shasum": "15e1e692a53befdd8e81a274878371609cef3a0a"
  },
  "_from": "esformatter-jsx@^2.0.11",
  "_resolved": "https://registry.npmjs.org/esformatter-jsx/-/esformatter-jsx-2.3.11.tgz"
}
