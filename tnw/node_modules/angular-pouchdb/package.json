{
  "name": "angular-pouchdb",
  "description": "AngularJS wrapper for PouchDB",
  "main": "dist/angular-pouchdb.js",
  "scripts": {
    "annotate": "ng-annotate -a - > dist/angular-pouchdb.js",
    "prebuild": "rimraf dist && mkdirp dist",
    "build": "npm --silent run wrap | npm run annotate",
    "postbuild": "npm run uglify",
    "coveralls": "coveralls < test/coverage/lcov/lcov.info",
    "lint": "eslint angular-pouchdb.js test/*.js",
    "pretest": "eslint angular-pouchdb.js karma.conf.js test/*.js",
    "test": "karma start",
    "watch": "karma start --autoWatch true --singleRun false",
    "wrap": "catw prefix.js angular-pouchdb.js suffix.js",
    "uglify": "uglifyjs dist/angular-pouchdb.js -mc > dist/angular-pouchdb.min.js",
    "presemantic-release": "npm run build",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/angular-pouchdb/angular-pouchdb.git"
  },
  "keywords": [
    "angular",
    "pouchdb"
  ],
  "author": {
    "name": "Tom Vincent",
    "email": "npm@tlvince.com",
    "url": "http://tlvince.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/angular-pouchdb/angular-pouchdb/issues"
  },
  "homepage": "https://angular-pouchdb.github.io/angular-pouchdb/",
  "devDependencies": {
    "angular": "^1.4.1",
    "angular-mocks": "^1.4.1",
    "catw": "^1.0.1",
    "coveralls": "^2.11.2",
    "es5-shim": "^4.1.3",
    "eslint": "^0.24.1",
    "eslint-config-tlvince": "^1.2.0",
    "eslint-plugin-jasmine": "^1.3.0",
    "jasmine-core": "^2.1.3",
    "karma": "^0.12.24",
    "karma-cli": "0.0.4",
    "karma-coverage": "^0.2.7",
    "karma-jasmine": "^0.3.3",
    "karma-phantomjs-launcher": "^0.1.4",
    "mkdirp": "^0.5.1",
    "ng-annotate": "^0.14.1",
    "pouchdb": "^3.6.0",
    "rimraf": "^2.4.2",
    "semantic-release": "^4.0.3",
    "tlvince-blob-shim": "^1.0.0",
    "uglify-js": "^2.4.16"
  },
  "version": "2.1.2",
  "readme": "# angular-pouchdb\n\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\n> AngularJS wrapper for PouchDB\n\nA lightweight AngularJS service for PouchDB that:\n\n* Wraps Pouch's methods with `$q`\n* Makes Angular aware of asynchronous updates\n\n[travis-image]: https://img.shields.io/travis/angular-pouchdb/angular-pouchdb.svg\n[travis-url]: https://travis-ci.org/angular-pouchdb/angular-pouchdb\n[coveralls-image]: https://img.shields.io/coveralls/angular-pouchdb/angular-pouchdb.svg\n[coveralls-url]: https://coveralls.io/r/angular-pouchdb/angular-pouchdb\n\n## Why?\n\nSince PouchDB is asynchronous, you will often need to call `$scope.$apply()`\nbefore changes are reflected on the UI. For example:\n\n```js\nangular.controller('MyCtrl', function($scope, $window) {\n  var db = $window.PouchDB('db');\n  db.get('id')\n    .then(function(res) {\n      // Binding may/may not be updated depending on whether a digest cycle has\n      // been triggered elsewhere as Angular is unaware that `get` has resolved.\n      $scope.one = res;\n    });\n\n  var db2 = $window.PouchDB('db2');\n  db.get('id')\n    .then(function(res) {\n      $scope.$apply(function() {\n        // Value has been bound within Angular's context, so a digest will be\n        // triggered and the DOM updated\n        $scope.two = res;\n      });\n    });\n});\n```\n\nWriting `$scope.$apply` each time is laborious and we haven't even mentioned\nexception handling or `$digest already in progress` errors.\n\nangular-pouchdb handles `$scope.$apply` for you by wrapping PouchDB's promises\nwith `$q`. You can then use its promises as you would with any Angular promise,\nincluding the `.finally` method (not in the A+ spec).\n\n```js\nangular.controller('MyCtrl', function($scope, pouchDB) {\n  var db = pouchDB('db');\n  db.get('id')\n    .then(function(res) {\n      // Update UI (almost) instantly\n      $scope.one = res;\n    })\n    .catch(function(err) {\n      $scope.err = err;\n    })\n    .finally(function() {\n      $scope.got = true;\n    });\n});\n```\n\nPut another way, angular-pouchdb is **not** required to integrate PouchDB and\nAngularJS; they can and *do* happily work together without it. However,\nangular-pouchdb makes it more *conveniant* to do so.\n\n## Usage\n\n1. Install `angular-pouchdb` via Bower:\n\n    ```bash\n    bower install --save angular-pouchdb\n    ```\n\n2. Add `pouchdb` as a module dependency:\n\n    ```js\n    angular.module('app', ['pouchdb']);\n    ```\n\n3. Inject the `pouchDB` service in your app:\n\n    ```js\n    angular.service('service', function(pouchDB) {\n      var db = pouchDB('name');\n    });\n    ```\n\nFrom then on, PouchDB's standard *promises* [API][] applies. For example:\n\n```js\nangular.controller('MainCtrl', function($log, $scope, pouchDB) {\n  var db = pouchDB('dbname');\n  var doc = { name: 'David' };\n\n  function error(err) {\n    $log.error(err);\n  }\n\n  function get(res) {\n    if (!res.ok) {\n      return error(res);\n    }\n    return db.get(res.id);\n  }\n\n  function bind(res) {\n    $scope.doc = res;\n  }\n\n  db.post(doc)\n    .then(get)\n    .then(bind)\n    .catch(error);\n});\n```\n\nSee [examples][] for further usage examples.\n\n[api]: http://pouchdb.com/api.html\n[examples]: https://angular-pouchdb.github.io/angular-pouchdb/#/examples\n\n### Event emitters\n\nangular-pouchdb decorates PouchDB event emitters (such as those used by\n`replicate.{to,from}`) to make them more useful within Angular apps, per the\nfollowing mapping:\n\nEvent      | [Deferred method][]\n-----      | -------------------\n`change`   | `.notify`\n`uptodate` | `.notify`\n`complete` | `.resolve`\n`reject`   | `.reject`\n\n[deferred method]: https://docs.angularjs.org/api/ng/service/$q#the-deferred-api\n\n## Options\n\n### `pouchDBProvider.methods`\n\nA hash of `pouchDBMethod: decorator` pairs, with arbitrary nesting. Defaults to\n[POUCHDB_METHODS][] (a constant mapping PouchDB's core API).\n\nExample:\n\n```js\npouchDBProvider.methods = {\n  get: 'qify',\n  replicate: {\n    to: 'eventEmitter'\n  }\n};\n```\n\n[pouchdb_methods]: https://github.com/angular-pouchdb/angular-pouchdb/blob/master/angular-pouchdb.js#L4\n\n### `pouchDBDecorators`\n\nA service containing decorator functions used to wrap PouchDB's. By default,\nthis includes `qify` and `eventEmitter`.\n\nSince they're contained in a service, they can be substituted per standard\ndependency injection semantics, or reused outside of angular-pouchdb.\n\n## FAQ\n\n### Does this work with PouchDB plugins?\n\nangular-pouchdb only wraps PouchDB's core API by default. If you need to wrap\nother methods (for example, one exposed by a PouchDB plugin), there are (at\nleast) two strategies:\n\nIf the method exists synchronously, add the method name to\n`pouchDBProvider.methods` in an `angular.config` block, for example:\n\n```js\n.config(function(pouchDBProvider, POUCHDB_METHODS) {\n  // Example for nolanlawson/pouchdb-authentication\n  var authMethods = {\n    login: 'qify',\n    logout: 'qify',\n    getUser: 'qify'\n  };\n  pouchDBProvider.methods = angular.extend({}, POUCHDB_METHODS, authMethods);\n})\n```\n\nIf the method is added after instantiation asynchronously (perhaps via\na promise), manually apply a [decorator][] to the instance, for example:\n\n```js\n.controller('myCtrl', function(pouchDB, pouchDBDecorators) {\n  // Example for nolanlawson/pouchdb-find\n  var db = pouchDB('db');\n  db.find = pouchDBDecorators.qify(db.find);\n});\n```\n\n[decorator]: #pouchdbdecorators\n\n### How can I debug this?\n\nDebugging angular-pouchdb in a console can be done by first retrieving the\ninjector and calling the `pouchDB` service as normal, e.g.:\n\n```js\nvar pouchDB = angular.element(document.body).injector().get('pouchDB');\nvar db = pouchDB('mydb');\ndb.get('id').then();\n```\n\nFor further tips and tricks, see [CouchDB Best Practices][best-practices].\n\n[best-practices]: http://docs.ehealthafrica.org/couchdb-best-practices/\n\n### Can this be used with Browserify?\n\nYes! For example:\n\n```js\nrequire('angular').module('app', [\n  require('angular-pouchdb')\n]);\n```\n\n## Authors\n\n* © 2013-2014 Wilfred Springer <http://nxt.flotsam.nl>\n* © 2014-2015 Tom Vincent <https://tlvince.com/contact>\n\n## License\n\nReleased under the [MIT License][mit].\n\n[mit]: http://tlvince.mit-license.org\n",
  "readmeFilename": "README.md",
  "_id": "angular-pouchdb@2.1.2",
  "dist": {
    "shasum": "97f06b22d5eaa8b14360aa3cf3bb02a29b5a1abd"
  },
  "_from": "angular-pouchdb@^2.1.0",
  "_resolved": "https://registry.npmjs.org/angular-pouchdb/-/angular-pouchdb-2.1.2.tgz"
}
