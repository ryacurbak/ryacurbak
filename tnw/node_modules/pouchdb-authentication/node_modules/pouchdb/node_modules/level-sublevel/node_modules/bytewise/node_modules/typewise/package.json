{
  "name": "typewise",
  "version": "1.0.3",
  "description": "Typewise-structured sorting for arbitrarily complex data structures",
  "main": "index.js",
  "scripts": {
    "test": "tape test | faucet"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/deanlandolt/typewise.git"
  },
  "keywords": [
    "typewise",
    "types",
    "compare",
    "sort",
    "order",
    "collation",
    "complex",
    "structures",
    "leveldb",
    "indexeddb",
    "keyvalue"
  ],
  "author": {
    "name": "Dean Landolt",
    "email": "dean@deanlandolt.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/deanlandolt/bytewise/issues"
  },
  "homepage": "https://github.com/deanlandolt/typewise",
  "dependencies": {
    "typewise-core": "^1.2.0"
  },
  "devDependencies": {
    "faucet": "0.0.1",
    "tape": "^1.0.0"
  },
  "readme": "# typewise\n\nTypewise structured sorting for arbirarily complex data structures.\n\n[![build status](https://travis-ci.org/deanlandolt/typewise.svg?branch=master)](https://travis-ci.org/deanlandolt/typewise)\n\nThis library defines and implements the collation used by the [bytewise](https://github.com/deanlandolt/bytewise-core) encoding library.\n\nNOTE: the core typewise sorting functionality has been completely rewritten and moved to [typewise-core](https://github.com/deanlandolt/typewise-core). This library extends the data structures and comparators available to support more exotic types like ordered maps and sets, and shortlex-ordered tuples and records.\n\n\n## Type system\n\nIn order to properly express the rules for sorting and equality for a wide range of structures `typewise` defines a simple type system for controlling these properties across a range of data structures.\n\nA `typewise` type profile can be provide when creating a bytewise codec to control encoding and decoding behavior for specific types. Types may also contain high and low sentinal values that can be used to create `range` types which may be impossible be instantiate directly as instances.\n\nFor example, dates have no valid infinatary instances, but something analogous to the \"minimum\" and \"maximum\" dates is a useful construct for defining date intervals.\n\n\n## Issues\n\nIssues should be reported [here](https://github.com/deanlandolt/bytewise/issues).\n\n\n## License\n\n[MIT](http://deanlandolt.mit-license.org/)\n",
  "readmeFilename": "README.md",
  "_id": "typewise@1.0.3",
  "dist": {
    "shasum": "6ac99ca7c4b6aada37a75852df473c5f2411bac8"
  },
  "_from": "typewise@^1.0.3",
  "_resolved": "https://registry.npmjs.org/typewise/-/typewise-1.0.3.tgz"
}
