{
  "name": "npm-execspawn",
  "version": "1.3.0",
  "description": "Spawn locally installed npm dependencies with cross platform env and argument parsing support",
  "main": "index.js",
  "dependencies": {
    "debug": "^2.1.3",
    "execspawn": "^1.0.0",
    "shell-quote": "^1.5.0",
    "xtend": "^3.0.0"
  },
  "devDependencies": {
    "concat-stream": "^1.4.6",
    "tape": "^2.13.3"
  },
  "bin": {
    "npm-execspawn": "./bin.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/npm-execspawn"
  },
  "scripts": {
    "test": "node tests/test.js"
  },
  "keywords": [
    "npm",
    "exec",
    "spawn",
    "run",
    "path"
  ],
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/npm-execspawn/issues"
  },
  "homepage": "https://github.com/mafintosh/npm-execspawn",
  "readme": "# npm-execspawn\n\nSpawn locally installed npm dependencies with cross platform env and argument parsing support.\n\n```\nnpm install npm-execspawn\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/npm-execspawn.svg?style=flat)](http://travis-ci.org/mafintosh/npm-execspawn)\n\n## Usage\n\nFirst do\n\n```\nnpm install browserify\n```\n\nThen\n\n``` js\nvar execspawn = require('npm-execspawn')\n\nvar child = execspawn('browserify $FILENAME', {env:{FILENAME:'test.js'}})\nchild.stderr.pipe(process.stderr)\nchild.stdout.pipe(process.stdout)\n```\n\nThe above should browserify test.js and both windows and unix.\nThe options is passed directly to `child_process.spawn`.\n\nYou can also pass in a arguments array\n\n``` js\nexecspawn('echo $0 $1 and $2', ['a', 'b', 'c']).stdout.pipe(process.stdout)\n```\n\nThe above will print `echo a b and c` on all platforms.\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "npm-execspawn@1.3.0",
  "dist": {
    "shasum": "da134832ef210c6f321c6e3e63dfb315aa0a2b97"
  },
  "_from": "npm-execspawn@^1.0.6",
  "_resolved": "https://registry.npmjs.org/npm-execspawn/-/npm-execspawn-1.3.0.tgz"
}
