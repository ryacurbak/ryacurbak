{
  "name": "routes-router",
  "version": "4.2.1",
  "description": "Simplest router possible",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/routes-router.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/routes-router",
  "contributors": [
    {
      "name": "Raynos"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/routes-router/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "error": "^3.0.0",
    "hammock": "^0.1.9",
    "http-methods": "~0.1.0",
    "httperr": "^0.5.0",
    "inherits": "^2.0.1",
    "routes": "^2.1.0",
    "send-data": "^3.2.4",
    "xtend": "~2.1.1"
  },
  "devDependencies": {
    "hammock": "^0.1.6",
    "istanbul": "^0.2.10",
    "jshint": "^2.5.1",
    "opn": "^0.1.2",
    "pre-commit": "0.0.7",
    "process": "^0.7.0",
    "request": "^2.36.0",
    "tap-spec": "^0.2.0",
    "tape": "^2.13.2"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/routes-router/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "jshint": "jshint .",
    "test": "npm run jshint && node ./test/index.js | tap-spec",
    "cover": "istanbul cover --report none --print detail test/index.js",
    "view-cover": "istanbul report html && opn ./coverage/index.html"
  },
  "testling": {
    "files": "test/index.js",
    "browsers": [
      "ie/8..latest",
      "firefox/16..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest"
    ]
  },
  "readme": "# routes-router\n\n[![deprecated](http://hughsk.github.io/stability-badges/dist/deprecated.svg)](http://github.com/hughsk/stability-badges) [![dependency status][3]][4]\n\nSimplest request handler possible\n\n# **DEPRECATED** Use [http-hash-router](https://github.com/Matt-Esch/http-hash-router) instead\n\n## Example\n\n```js\nvar Router = require(\"routes-router\")\nvar http = require(\"http\")\n\nvar router = Router()\n\nhttp.createServer(router)\n\nrouter.addRoute(\"/foo\", function (req, res) {\n    res.end(\"hello!\")\n})\n\nrouter.addRoute(\"/bars/:barName\", function (req, res, opts) {\n    res.end(\"you request bars \" + opts.params.barName)\n})\n\nrouter.addRoute(\"/foos/:fooName\", function (req, res, opts, cb) {\n    db.get(opts.params.fooName, function (err, value) {\n        if (err) return cb(err)\n\n        res.end(JSON.stringify(value))\n    })\n})\n\nrouter.addRoute(\"/baz/:things\", {\n    GET: function (req, res) {\n        res.end(\"I will give you your thing\")\n    },\n    POST: function (req, res) {\n        res.end(\"got your things\")\n    }\n})\n```\n\n## Error handling with a router\n\nYou can use a router to do central error handling\n\n```js\nvar Router = require(\"routes-router\")\nvar sendError = require(\"send-data/error\")\nvar uuid = require(\"uuid\")\n\nvar router = Router({\n  errorHandler: function (req, res, err) {\n    err.id = uuid()\n\n    // log it somewhere\n    logError(req, res, err)\n\n    // if req is json\n    if (isJson(req)) {\n      sendError(req, res, err)\n    } else {\n      // render HTML 500 page\n      renderErrorPage(req, res, err)\n    }\n  },\n  teardown: function (req, res, err) {\n    // an unexcepted exception occured\n    // process is in corrupted state\n    // you have to shut it down\n    // see node domains docs\n  },\n  notFound: function (req, res) {\n    // render a custom 404 page\n    renderNotfoundPage(req, res)\n  }\n})\n```\n\n## Cascading errors in a tree of routers\n\nSince a `Router` just returns a `function (req, res) {}` you can \n  add routers to a router\n\nHere we can just embed a `Router` instance in another router\n  instance. A child router will use the parent router's callback\n  so all error handling is managed in the parent, not the child.\n\nThis means you can define your error handling in your parent\n  and all children will re-use that error handling logic.\n\nNote that we use the `.prefix()` instead of `.addRoute()` \n  method to add child routers. The `.prefix()` ensures that\n  both `/user`, `/user/` and `/user/*?` goes to the child router.\n\n```js\nvar Router = require(\"routes-router\")\n\nvar app = Router({\n  errorHandler: function (req, res) {\n    res.statusCode = 500\n    res.end(\"no u\")\n  },\n  notFound: function (req, res) {\n    res.statusCode = 404\n    res.end(\"oh noes\")\n  }\n})\n\nvar users = Router()\nvar posts = Router()\n\napp.prefix(\"/user\", users)\napp.prefix(\"/post\", posts)\n\nusers.addRoute(\"/\", function (req, res) {\n  res.end(\"all users\")\n})\nusers.addRoute(\"/:id\", function (req, res, opts) {\n  res.end(\"user \" + opts.params.id)\n})\n\nposts.addRoute(\"/\", function (req, res) {\n  res.end(\"all posts\")\n})\nposts.addRoute(\"/:id\", function (req, res, opts) {\n  res.end(\"post \" + opts.params.id)\n})\n```\n\n\n## Installation\n\n`npm install routes-router`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/routes-router.png\n  [2]: http://travis-ci.org/Raynos/routes-router\n  [3]: https://david-dm.org/Raynos/routes-router/status.png\n  [4]: https://david-dm.org/Raynos/routes-router\n  [5]: https://ci.testling.com/Raynos/routes-router.png\n  [6]: https://ci.testling.com/Raynos/routes-router\n",
  "readmeFilename": "README.md",
  "_id": "routes-router@4.2.1",
  "dist": {
    "shasum": "a16535be24438e30cc7508e535d0e5edb8aac37e"
  },
  "_from": "routes-router@^4.1.1",
  "_resolved": "https://registry.npmjs.org/routes-router/-/routes-router-4.2.1.tgz"
}
