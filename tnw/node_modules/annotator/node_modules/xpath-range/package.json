{
  "name": "xpath-range",
  "version": "0.0.5",
  "description": "A (Browser) Range implementation / wrapper with XPath features, extracted from Annotator",
  "main": "lib/index.js",
  "scripts": {
    "test": "./tools/lint && ./tools/test",
    "start": "./tools/serve",
    "prepublish": "coffee -o lib src/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/openannotation/xpath-range.git"
  },
  "author": "",
  "license": {
    "name": "MIT + GPL-3.0+ Dual License",
    "url": "https://github.com/openannotation/xpath-range/blob/master/LICENSE"
  },
  "bugs": {
    "url": "https://github.com/openannotation/xpath-range/issues"
  },
  "homepage": "https://github.com/openannotation/xpath-range",
  "dependencies": {
    "jquery": "~1.11.0"
  },
  "devDependencies": {
    "browserify": "^4.1.10",
    "coffee-script": "^1.7.1",
    "coffeeify": "^0.6.0",
    "coffeelint": "~1.1.0",
    "connect": "~2.10.1",
    "convert-source-map": "~0.3.1",
    "glob": "3.2.9",
    "kew": "~0.2.2",
    "mocha": "~1.12.1",
    "mocha-phantomjs": "~3.3.2",
    "chai": "~1.7.2",
    "sinon": "~1.6.0",
    "source-map": "~0.1.32",
    "through": "~2.3.4",
    "watchify": "^0.10.2"
  },
  "readme": "# xpath-range\n\n[![Build Status](https://travis-ci.org/openannotation/xpath-range.svg?branch=master)](https://travis-ci.org/openannotation/xpath-range)\n\n## Introduction\n\nA (Browser) Range implementation / wrapper, with XPath creation features.\n\nThis module implements three Range objects: `BrowserRange`, `SerializedRange`, and `NormalizedRange`.\n\n### BrowserRange\n\nThis serves to just provide a wrapper around the DOM Range object with two additional functions: `serialize()` returns an object fit for serialization, and `normalize()` returns a `NormalizedRange` instance after normalizing the range. (Normalization involves moving the start or end of the range based on some rules.)\n\n### NormalizedRange\n\nThis object provides different properties than the DOM Range, but encapsulates the same concept. It also adds a few other methods.\n\nThe `serialize()` method is actually the serialization as described in `BrowserRange`. The `BrowserRange` `serialize()` method actually calls `normalize()` first to get a `NormalizedRange`. and then calls `serialize()` on that.\n\nMost of serialization is a simple XPath builder with the added detail that a relative root can be passed in.\n\n`NormalizedRange` objects also provide a function to get the text nodes they contain, to get the string of text contained by those text nodes, and to get a real DOM Range object.\n\nIt's worth noting that `NormalizedRange#text()` is probably the equivalent of the DOM Range `#toString()` method.\n\nA `limit()` method provides the ability to reduce the range to only the nodes that fall inside the given container.\n\n### SerializedRange\n\nThis serves as an OO wrapper around a serializable Range. It contains an XPath expression for each of the DOM Range object's start- and endContainer properties as well a the start and end offsets. Its `normalize()` method first attempts to resolve to XPath to find this range in the document and, having resolved the start- and endContainer nodes, returns a `NormalizedRange.`\n\n## Usage\n\nYou can install `xpath-range` by executing `npm intall xpath-range`.\n`xpath-range` is also [browserify](http://browserify.org/)-compatible, so you can simply `require()` it in your code.\n\nExample code to create a serialized, xpath-based description of the region currectly selected by the user:\n\n```\nRange = require(\"xpath-range\").Range;\n\ndoMagic = function() {\n  range\t= getSelection().getRangeAt(0);\n  bRange = new Range.BrowserRange(range);\n  sRange = bRange.serialize(document.body);\n  console.log(sRange);\n}\n```\n\nRun this through Browserify, and include the resulting JS bundle in an HTML document like this:\n\n```\n<html>\n  <body>\n    <script src=\"test-run.js\"></script>\n    <p>\n      This is a test text.\n    </p>\n  </body>\n</html>\n\n```\n\nAfter loading the page, and selecting something on the page, you can execute the `doMagic()` function (from the dev console), and you will see the xpath-based, serialized form of your selection. (Which will be pretty simple, given the example document, but hey, it's s start.)\n\n## Development\n\nIf you want to contribute/fix something, you should fork this repository, add your contribution, and send a PR.\nDon't forget to add/modify test cases to cover your change.\n\n## Testing\n\nYou can run the command-line test suite by executing `npm test`, or you can launch the development environment using `npm start', and then point your browser to http://localhost:4000/test/runner.html\n\n## Maintainers\n\nOriginally, this code has been part of the [Annotator project](http://annotatorjs.org/). It has been separated from [it's repository](https://github.com/openannotation/annotator).\n\nAny discussion should happen on the [annotator-dev](https://lists.okfn.org/mailman/listinfo/annotator-dev) mailing list.\n",
  "readmeFilename": "README.md",
  "_id": "xpath-range@0.0.5",
  "dist": {
    "shasum": "93ae946275c7c13f38a2e0af974b6a68bc5a8034"
  },
  "_from": "xpath-range@0.0.5",
  "_resolved": "https://registry.npmjs.org/xpath-range/-/xpath-range-0.0.5.tgz"
}
